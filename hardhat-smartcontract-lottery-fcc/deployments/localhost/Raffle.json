{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x489753f2a50e5a41768f9d4c7118327596db3e2210abcc21a3967295fcb8ea18",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1302142",
    "logsBloom": "0x
    "blockHash": "0x7f3715bfa4960538f2cbe3dd81fa411a12d599191edc6a5ab9fcd92ce383b303",
    "transactionHash": "0x489753f2a50e5a41768f9d4c7118327596db3e2210abcc21a3967295fcb8ea18",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1302142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "7b0e55b89ed2bbd5eeb10c6ae540f1f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. the following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\n\\n// Enter the lottery (paying some amount)\\n// Pick a random winner (verifiably random)\\n// Winner to be selected every X minutes -> completly automate\\n// Chainlink Oracle -> Randomness, Automated Execution (Chainlink keeper)\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^ 0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\nerror Raffle__TransferFailed();\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n\\n    // Type declarations\\n    enum RaffleState{\\n        OPEN, CALCULATING\\n    }\\n\\n    // State Variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState; // pending, open, closed, calculating\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    \\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2){\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable{\\n        // require ( msg.value > i_entranceFee, \\\"Not enough ETH!\\\" )\\n        if (msg.value < i_entranceFee){\\n            revert Raffle__SendMoreToEnterRaffle();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n        s_players.push( payable(msg.sender) );\\n        // Emit an event when we update a dynamic array or mapping \\n        // Named events with the function name reversed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for the `upkeepNeeded` to return true.\\n     * the following should be true in order to return true:\\n     * 1. Our time interval should have passed\\n     * 2. The lottery should have at least 1 player, and have some ETH\\n     * 3. Our subscription is funded with LINK\\n     * 4. The lottery should be in an \\\"open\\\" state\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        // Quiz... is this redundant?\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function requestRandomWinner() external{\\n        // Request the random number\\n        // Once we get it, do sth with it\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override{\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success, \\\"Transfer failed\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x479e9b1f7a731cb312e4dbca95244c2a459ff00a90b857a09349960b2dd7c484\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019ed380380620019ed833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508160a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508467ffffffffffffffff166101008167ffffffffffffffff16815250508063ffffffff166101208163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426001819055508261014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611602620003eb600039600081816109680152610a110152600081816106ce01526108440152600081816106ab015261082101526000818161068a015261080001526000818161064e01526107c401526000818161032c015261042901526000818161036901526103bd01526116026000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461026a578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b806353a2c19a146101d65780635f1b0fd8146102015780636e04ff0d1461022c576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc14610194578063522a1f0b146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f7610328565b6040516101049190610d83565b60405180910390f35b34801561011957600080fd5b50610122610350565b60405161012f9190610e15565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610fc9565b610367565b005b610169610427565b005b34801561017757600080fd5b50610192600480360381019061018d9190611080565b610596565b005b3480156101a057600080fd5b506101a9610796565b6040516101b6919061110e565b60405180910390f35b3480156101cb57600080fd5b506101d46107c0565b005b3480156101e257600080fd5b506101eb610909565b6040516101f89190610d83565b60405180910390f35b34801561020d57600080fd5b50610216610918565b6040516102239190610d83565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e91906111de565b610925565b6040516102619291906112ca565b60405180910390f35b34801561027657600080fd5b5061027f610a0d565b60405161028c9190610d83565b60405180910390f35b3480156102a157600080fd5b506102aa610a35565b6040516102b79190610d83565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e291906112fa565b610a3f565b6040516102f4919061110e565b60405180910390f35b34801561030957600080fd5b50610312610a86565b60405161031f9190610d83565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610410929190611327565b60405180910390fd5b6104238282610a92565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610481576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561049557610494610d9e565b5b600260149054906101000a900460ff1660018111156104b7576104b6610d9e565b5b146104ee576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105b060405180602001604052806000815250610925565b5090508061061f5747600080549050600260149054906101000a900460ff1660018111156105e1576105e0610d9e565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161061693929190611350565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561064557610644610d9e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161070f9594939291906113ff565b602060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611467565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016108859594939291906113ff565b602060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190611467565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561094d5761094c610d9e565b5b6000600181111561096157610960610d9e565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261099591906114c3565b119050600080600080549050119050600080471190508280156109b55750835b80156109be5750805b80156109c75750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b6000808281548110610a5457610a536114f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610aad57610aac6114f7565b5b6020026020010151610abf9190611555565b90506000808281548110610ad657610ad56114f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b5f57610b5e610e86565b5b604051908082528060200260200182016040528015610b8d5781602001602082028036833780820191505090505b5060009080519060200190610ba3929190610cc3565b506000600260146101000a81548160ff02191690836001811115610bca57610bc9610d9e565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bfc906115b7565b60006040518083038185875af1925050503d8060008114610c39576040519150601f19603f3d011682016040523d82523d6000602084013e610c3e565b606091505b5050905080610c79576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d3c579160200282015b82811115610d3b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ce3565b5b509050610d499190610d4d565b5090565b5b80821115610d66576000816000905550600101610d4e565b5090565b6000819050919050565b610d7d81610d6a565b82525050565b6000602082019050610d986000830184610d74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610dde57610ddd610d9e565b5b50565b6000819050610def82610dcd565b919050565b6000610dff82610de1565b9050919050565b610e0f81610df4565b82525050565b6000602082019050610e2a6000830184610e06565b92915050565b6000604051905090565b600080fd5b600080fd5b610e4d81610d6a565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ebe82610e75565b810181811067ffffffffffffffff82111715610edd57610edc610e86565b5b80604052505050565b6000610ef0610e30565b9050610efc8282610eb5565b919050565b600067ffffffffffffffff821115610f1c57610f1b610e86565b5b602082029050602081019050919050565b600080fd5b6000610f45610f4084610f01565b610ee6565b90508083825260208201905060208402830185811115610f6857610f67610f2d565b5b835b81811015610f915780610f7d8882610e5b565b845260208401935050602081019050610f6a565b5050509392505050565b600082601f830112610fb057610faf610e70565b5b8135610fc0848260208601610f32565b91505092915050565b60008060408385031215610fe057610fdf610e3a565b5b6000610fee85828601610e5b565b925050602083013567ffffffffffffffff81111561100f5761100e610e3f565b5b61101b85828601610f9b565b9150509250929050565b600080fd5b60008083601f8401126110405761103f610e70565b5b8235905067ffffffffffffffff81111561105d5761105c611025565b5b60208301915083600182028301111561107957611078610f2d565b5b9250929050565b6000806020838503121561109757611096610e3a565b5b600083013567ffffffffffffffff8111156110b5576110b4610e3f565b5b6110c18582860161102a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110f8826110cd565b9050919050565b611108816110ed565b82525050565b600060208201905061112360008301846110ff565b92915050565b600080fd5b600067ffffffffffffffff82111561114957611148610e86565b5b61115282610e75565b9050602081019050919050565b82818337600083830152505050565b600061118161117c8461112e565b610ee6565b90508281526020810184848401111561119d5761119c611129565b5b6111a884828561115f565b509392505050565b600082601f8301126111c5576111c4610e70565b5b81356111d584826020860161116e565b91505092915050565b6000602082840312156111f4576111f3610e3a565b5b600082013567ffffffffffffffff81111561121257611211610e3f565b5b61121e848285016111b0565b91505092915050565b60008115159050919050565b61123c81611227565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127c578082015181840152602081019050611261565b8381111561128b576000848401525b50505050565b600061129c82611242565b6112a6818561124d565b93506112b681856020860161125e565b6112bf81610e75565b840191505092915050565b60006040820190506112df6000830185611233565b81810360208301526112f18184611291565b90509392505050565b6000602082840312156113105761130f610e3a565b5b600061131e84828501610e5b565b91505092915050565b600060408201905061133c60008301856110ff565b61134960208301846110ff565b9392505050565b60006060820190506113656000830186610d74565b6113726020830185610d74565b61137f6040830184610d74565b949350505050565b6000819050919050565b61139a81611387565b82525050565b600067ffffffffffffffff82169050919050565b6113bd816113a0565b82525050565b600061ffff82169050919050565b6113da816113c3565b82525050565b600063ffffffff82169050919050565b6113f9816113e0565b82525050565b600060a0820190506114146000830188611391565b61142160208301876113b4565b61142e60408301866113d1565b61143b60608301856113f0565b61144860808301846113f0565b9695505050505050565b60008151905061146181610e44565b92915050565b60006020828403121561147d5761147c610e3a565b5b600061148b84828501611452565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ce82610d6a565b91506114d983610d6a565b9250828210156114ec576114eb611494565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061156082610d6a565b915061156b83610d6a565b92508261157b5761157a611526565b5b828206905092915050565b600081905092915050565b50565b60006115a1600083611586565b91506115ac82611591565b600082019050919050565b60006115c282611594565b915081905091905056fea2646970667358221220ba69499c562bbc3a7629778dbf7befcc7d15eea562f210f7af0ac363a76f968064736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461026a578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b806353a2c19a146101d65780635f1b0fd8146102015780636e04ff0d1461022c576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc14610194578063522a1f0b146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f7610328565b6040516101049190610d83565b60405180910390f35b34801561011957600080fd5b50610122610350565b60405161012f9190610e15565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610fc9565b610367565b005b610169610427565b005b34801561017757600080fd5b50610192600480360381019061018d9190611080565b610596565b005b3480156101a057600080fd5b506101a9610796565b6040516101b6919061110e565b60405180910390f35b3480156101cb57600080fd5b506101d46107c0565b005b3480156101e257600080fd5b506101eb610909565b6040516101f89190610d83565b60405180910390f35b34801561020d57600080fd5b50610216610918565b6040516102239190610d83565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e91906111de565b610925565b6040516102619291906112ca565b60405180910390f35b34801561027657600080fd5b5061027f610a0d565b60405161028c9190610d83565b60405180910390f35b3480156102a157600080fd5b506102aa610a35565b6040516102b79190610d83565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e291906112fa565b610a3f565b6040516102f4919061110e565b60405180910390f35b34801561030957600080fd5b50610312610a86565b60405161031f9190610d83565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610410929190611327565b60405180910390fd5b6104238282610a92565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610481576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561049557610494610d9e565b5b600260149054906101000a900460ff1660018111156104b7576104b6610d9e565b5b146104ee576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105b060405180602001604052806000815250610925565b5090508061061f5747600080549050600260149054906101000a900460ff1660018111156105e1576105e0610d9e565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161061693929190611350565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561064557610644610d9e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161070f9594939291906113ff565b602060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190611467565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016108859594939291906113ff565b602060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190611467565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561094d5761094c610d9e565b5b6000600181111561096157610960610d9e565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261099591906114c3565b119050600080600080549050119050600080471190508280156109b55750835b80156109be5750805b80156109c75750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b6000808281548110610a5457610a536114f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610aad57610aac6114f7565b5b6020026020010151610abf9190611555565b90506000808281548110610ad657610ad56114f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b5f57610b5e610e86565b5b604051908082528060200260200182016040528015610b8d5781602001602082028036833780820191505090505b5060009080519060200190610ba3929190610cc3565b506000600260146101000a81548160ff02191690836001811115610bca57610bc9610d9e565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bfc906115b7565b60006040518083038185875af1925050503d8060008114610c39576040519150601f19603f3d011682016040523d82523d6000602084013e610c3e565b606091505b5050905080610c79576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d3c579160200282015b82811115610d3b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ce3565b5b509050610d499190610d4d565b5090565b5b80821115610d66576000816000905550600101610d4e565b5090565b6000819050919050565b610d7d81610d6a565b82525050565b6000602082019050610d986000830184610d74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610dde57610ddd610d9e565b5b50565b6000819050610def82610dcd565b919050565b6000610dff82610de1565b9050919050565b610e0f81610df4565b82525050565b6000602082019050610e2a6000830184610e06565b92915050565b6000604051905090565b600080fd5b600080fd5b610e4d81610d6a565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ebe82610e75565b810181811067ffffffffffffffff82111715610edd57610edc610e86565b5b80604052505050565b6000610ef0610e30565b9050610efc8282610eb5565b919050565b600067ffffffffffffffff821115610f1c57610f1b610e86565b5b602082029050602081019050919050565b600080fd5b6000610f45610f4084610f01565b610ee6565b90508083825260208201905060208402830185811115610f6857610f67610f2d565b5b835b81811015610f915780610f7d8882610e5b565b845260208401935050602081019050610f6a565b5050509392505050565b600082601f830112610fb057610faf610e70565b5b8135610fc0848260208601610f32565b91505092915050565b60008060408385031215610fe057610fdf610e3a565b5b6000610fee85828601610e5b565b925050602083013567ffffffffffffffff81111561100f5761100e610e3f565b5b61101b85828601610f9b565b9150509250929050565b600080fd5b60008083601f8401126110405761103f610e70565b5b8235905067ffffffffffffffff81111561105d5761105c611025565b5b60208301915083600182028301111561107957611078610f2d565b5b9250929050565b6000806020838503121561109757611096610e3a565b5b600083013567ffffffffffffffff8111156110b5576110b4610e3f565b5b6110c18582860161102a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110f8826110cd565b9050919050565b611108816110ed565b82525050565b600060208201905061112360008301846110ff565b92915050565b600080fd5b600067ffffffffffffffff82111561114957611148610e86565b5b61115282610e75565b9050602081019050919050565b82818337600083830152505050565b600061118161117c8461112e565b610ee6565b90508281526020810184848401111561119d5761119c611129565b5b6111a884828561115f565b509392505050565b600082601f8301126111c5576111c4610e70565b5b81356111d584826020860161116e565b91505092915050565b6000602082840312156111f4576111f3610e3a565b5b600082013567ffffffffffffffff81111561121257611211610e3f565b5b61121e848285016111b0565b91505092915050565b60008115159050919050565b61123c81611227565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127c578082015181840152602081019050611261565b8381111561128b576000848401525b50505050565b600061129c82611242565b6112a6818561124d565b93506112b681856020860161125e565b6112bf81610e75565b840191505092915050565b60006040820190506112df6000830185611233565b81810360208301526112f18184611291565b90509392505050565b6000602082840312156113105761130f610e3a565b5b600061131e84828501610e5b565b91505092915050565b600060408201905061133c60008301856110ff565b61134960208301846110ff565b9392505050565b60006060820190506113656000830186610d74565b6113726020830185610d74565b61137f6040830184610d74565b949350505050565b6000819050919050565b61139a81611387565b82525050565b600067ffffffffffffffff82169050919050565b6113bd816113a0565b82525050565b600061ffff82169050919050565b6113da816113c3565b82525050565b600063ffffffff82169050919050565b6113f9816113e0565b82525050565b600060a0820190506114146000830188611391565b61142160208301876113b4565b61142e60408301866113d1565b61143b60608301856113f0565b61144860808301846113f0565b9695505050505050565b60008151905061146181610e44565b92915050565b60006020828403121561147d5761147c610e3a565b5b600061148b84828501611452565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ce82610d6a565b91506114d983610d6a565b9250828210156114ec576114eb611494565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061156082610d6a565b915061156b83610d6a565b92508261157b5761157a611526565b5b828206905092915050565b600081905092915050565b50565b60006115a1600083611586565b91506115ac82611591565b600082019050919050565b60006115c282611594565b915081905091905056fea2646970667358221220ba69499c562bbc3a7629778dbf7befcc7d15eea562f210f7af0ac363a76f968064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. the following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1161,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1180,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1182,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)1156"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1156": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}